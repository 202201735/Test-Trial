# -*- coding: utf-8 -*-
"""Assignment 1- Software Modeling

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OfN35uO7_zu1tvvWJS9r8aFeUjKSY3_0
"""

class BoardingPass:
    def __init__(self, passenger_name, flight_number, seat_number, departure_airport, destination_airport, departure_date, departure_time):
        self._passenger_name = passenger_name
        self._flight_number = flight_number
        self._seat_number = seat_number
        self._departure_airport = departure_airport
        self._destination_airport = destination_airport
        self._departure_date = departure_date
        self._departure_time = departure_time
        self._is_checked_in = False
        self._is_boarded = False

    # Getter methods
    def get_passenger_name(self):
        return self._passenger_name

    def get_flight_number(self):
        return self._flight_number

    def get_seat_number(self):
        return self._seat_number

    def get_departure_airport(self):
        return self._departure_airport

    def get_destination_airport(self):
        return self._destination_airport

    def get_departure_date(self):
        return self._departure_date

    def get_departure_time(self):
        return self._departure_time

    def is_checked_in(self):
        return self._is_checked_in

    def is_boarded(self):
        return self._is_boarded

    # Setter methods
    def set_passenger_name(self, new_name):
        self._passenger_name = new_name

    def set_flight_number(self, new_flight_number):
        self._flight_number = new_flight_number

    def set_seat_number(self, new_seat_number):
        self._seat_number = new_seat_number

    def set_departure_airport(self, new_departure_airport):
        self._departure_airport = new_departure_airport

    def set_destination_airport(self, new_destination_airport):
        self._destination_airport = new_destination_airport

    def set_departure_date(self, new_departure_date):
        self._departure_date = new_departure_date

    def set_departure_time(self, new_departure_time):
        self._departure_time = new_departure_time

    def check_in(self):
        self._is_checked_in = True
        print(f"Check-in successful for {self._passenger_name} on Flight {self._flight_number}.")

    def board_flight(self):
        self._is_boarded = True
        print(f"Passenger {self._passenger_name} has boarded Flight {self._flight_number}.")

# Creating an instance of the BoardingPass class
my_ticket = BoardingPass(
    passenger_name="Hessa Mohammad",
    flight_number="ABC123",
    seat_number="12A",
    departure_airport="ZRH	ZÃ¼rich Airport",
    destination_airport="FLR  Florance",
    departure_date="2024-02-24",
    departure_time="14:30"
)

# Accessing attributes using getters
print(f"Passenger: {my_ticket.get_passenger_name()}")
print(f"Flight: {my_ticket.get_flight_number()}, Seat: {my_ticket.get_seat_number()}")
print(f"Departure: {my_ticket.get_departure_airport()}, Destination: {my_ticket.get_destination_airport()}")
print(f"Departure Date: {my_ticket.get_departure_date()}, Departure Time: {my_ticket.get_departure_time()}")

# Calling methods
my_ticket.check_in()
my_ticket.board_flight()

class Airplane:
    def __init__(self, airline, hours, seat_count, engine, airplane_id):
        self._airline = airline
        self._hours = hours
        self._seat_count = seat_count
        self._engine = engine
        self._airplane_id = airplane_id

    # Getter methods
    def get_airline(self):
        return self._airline

    def get_hours(self):
        return self._hours

    def get_seat_count(self):
        return self._seat_count

    def get_engine(self):
        return self._engine

    def get_airplane_id(self):
        return self._airplane_id

    # Setter methods
    def set_airline(self, airline):
        self._airline = airline

    def set_hours(self, hours):
        self._hours = hours

    def set_seat_count(self, seat_count):
        self._seat_count = seat_count

    def set_engine(self, engine):
        self._engine = engine

    def set_airplane_id(self, airplane_id):
        self._airplane_id = airplane_id

# Example of creating an instance of the Airplane class
my_airplane = Airplane(
    airline="Delta Airline",
    hours=5000,
    seat_count=180,
    engine="Twin Jet",
    airplane_id="EA123"
)

# Example of using getter methods
print(f"Airplane ID: {my_airplane.get_airplane_id()}")
print(f"Airline: {my_airplane.get_airline()}")
print(f"Flight Hours: {my_airplane.get_hours()}")
print(f"Seat Count: {my_airplane.get_seat_count()}")
print(f"Engine: {my_airplane.get_engine()}")

# Example of using setter methods to update the airplane's airline
my_airplane.set_airline("Emirates Airline")
print(f"Updated Airline: {my_airplane.get_airline()}")

class Flight:
    def __init__(self, crew_number, terminal, number_of_passengers, airplane, delayed=False, canceled=False):
        self._crew_number = crew_number
        self._terminal = terminal
        self._number_of_passengers = number_of_passengers
        self._airplane = airplane
        self._delayed = delayed
        self._canceled = canceled

    # Getter methods
    def get_crew_number(self):
        return self._crew_number

    def get_terminal(self):
        return self._terminal

    def get_number_of_passengers(self):
        return self._number_of_passengers

    def get_airplane(self):
        return self._airplane

    def is_delayed(self):
        return self._delayed

    def is_canceled(self):
        return self._canceled

    # Setter methods
    def set_crew_number(self, crew_number):
        self._crew_number = crew_number

    def set_terminal(self, terminal):
        self._terminal = terminal

    def set_number_of_passengers(self, number_of_passengers):
        self._number_of_passengers = number_of_passengers

    def set_airplane(self, airplane):
        self._airplane = airplane

    def set_delayed(self, delayed):
        self._delayed = delayed

    def set_canceled(self, canceled):
        self._canceled = canceled

    def update_flight_status(self, delayed=None, canceled=None):
        """Update the flight status based on delays or cancellations"""
        pass
        if delayed is not None:
            self._delayed = delayed
            status = "delayed" if delayed else "on time"
            print(f"Flight status has been updated to {status}.")

        if canceled is not None:
            self._canceled = canceled
            status = "canceled" if canceled else "scheduled"
            print(f"Flight has been {status}.")

    def board_passengers(self):
        """Manage the boarding process for passengers"""
        pass
        if self._canceled:
            print("Flight has been canceled. Boarding will not proceed.")
        elif self._delayed:
            print("Flight is delayed. Please wait for further announcements.")
        else:
            print(f"Boarding has started for {self._number_of_passengers} passengers at Terminal {self._terminal}.")


# Example usage:
my_flight = Flight(
    crew_number=4,
    terminal="3B",
    number_of_passengers=200,
    airplane="Airbus A320",
    delayed=False,  # Initially, the flight might not be delayed
    canceled=False  # Initially, the flight is not canceled
)

# Now, to update the flight status to indicate it is canceled
my_flight.update_flight_status(canceled=True)

# This will set the _canceled attribute to True and print a message indicating the flight has been canceled.


# Accessing attributes using getters
print(f"Crew Number: {my_flight.get_crew_number()}")
print(f"Terminal: {my_flight.get_terminal()}")
print(f"Number of Passengers: {my_flight.get_number_of_passengers()}")
print(f"Airplane: {my_flight.get_airplane()}")
print(f"Delayed: {my_flight.is_delayed()}")
print(f"Canceled: {my_flight.is_canceled()}")

# Updating attributes using setters
my_flight.set_delayed(False)
my_flight.set_canceled(False)
print(f"Updated Delayed Status: {my_flight.is_delayed()}")
print(f"Updated Canceled Status: {my_flight.is_canceled()}")

# Assuming you have an instance of the Flight class named my_flight
my_flight = Flight(
    crew_number=4,
    terminal="3B",
    number_of_passengers=200,
    airplane="Airbus A320",
    delayed=False,  # Initially, the flight might not be delayed
    canceled=False  # Initially, the flight is not canceled
)

# Now, to update the flight status to indicate it is canceled
my_flight.update_flight_status(canceled=True)

# This will set the _canceled attribute to True and print a message indicating the flight has been canceled.

class Passenger:
    def __init__(self, first_name, last_name, age, ID_number, phone_number, email_id, nationality):
        self._first_name = first_name
        self._last_name = last_name
        self._age = age
        self._ID_number = ID_number
        self._phone_number = phone_number
        self._email_id = email_id
        self._nationality = nationality

    # Getter methods
    def get_first_name(self):
        return self._first_name

    def get_last_name(self):
        return self._last_name

    def get_age(self):
        return self._age

    def get_ID_number(self):
        return self._ID_number

    def get_phone_number(self):
        return self._phone_number

    def get_email_id(self):
        return self._email_id

    def get_nationality(self):
        return self._nationality

    # Setter methods
    def set_first_name(self, first_name):
        self._first_name = first_name

    def set_last_name(self, last_name):
        self._last_name = last_name

    def set_age(self, age):
        self._age = age

    def set_ID_number(self, ID_number):
        self._ID_number = ID_number

    def set_phone_number(self, phone_number):
        self._phone_number = phone_number

    def set_email_id(self, email_id):
        self._email_id = email_id

    def set_nationality(self, nationality):
        self._nationality = nationality

    # Placeholder for additional functionality
    def update_passenger_info(self):
        """Placeholder method to update passenger's information"""
        pass

# Example of creating an instance of the Passenger class
my_passenger = Passenger(
    first_name="John",
    last_name="Doe",
    age=30,
    ID_number="ID123456",
    phone_number="123-456-7890",
    email_id="john.doe@example.com",
    nationality="American"
)

# Example of using getter methods
print(f"Passenger: {my_passenger.get_first_name()} {my_passenger.get_last_name()}")
print(f"Age: {my_passenger.get_age()}, ID Number: {my_passenger.get_ID_number()}")
print(f"Phone: {my_passenger.get_phone_number()}, Email: {my_passenger.get_email_id()}")
print(f"Nationality: {my_passenger.get_nationality()}")

# Example of using setter methods to update the passenger's phone number
my_passenger.set_phone_number("987-654-3210")
print(f"Updated Phone: {my_passenger.get_phone_number()}")

class StaffCrew:
    def __init__(self, first_name, last_name, age, employee_number, email_id, shift_hours):
        self._first_name = first_name
        self._last_name = last_name
        self._age = age
        self._employee_number = employee_number
        self._email_id = email_id
        self._shift_hours = shift_hours

    # Getter methods
    def get_first_name(self):
        return self._first_name

    def get_last_name(self):
        return self._last_name

    def get_age(self):
        return self._age

    def get_employee_number(self):
        return self._employee_number

    def get_email_id(self):
        return self._email_id

    def get_shift_hours(self):
        return self._shift_hours

    # Setter methods
    def set_first_name(self, first_name):
        self._first_name = first_name

    def set_last_name(self, last_name):
        self._last_name = last_name

    def set_age(self, age):
        self._age = age

    def set_employee_number(self, employee_number):
        self._employee_number = employee_number

    def set_email_id(self, email_id):
        self._email_id = email_id

    def set_shift_hours(self, shift_hours):
        if shift_hours > 10:
            print("Shift hours cannot exceed 10 hours for safety reasons.")
        else:
            self._shift_hours = shift_hours

    def can_board_flight(self):
        """Check if the staff crew member is allowed to board the flight based on shift hours."""
        if self._shift_hours > 20:
            return False
        else:
            return True

    # Placeholder for additional functionality
    def schedule_shift(self):
        """Placeholder method to schedule or update the staff crew's shift"""
        pass

# Example of creating an instance of the StaffCrew class with more than 10 shift hours
my_staff = StaffCrew(
    first_name="Alice",
    last_name="Johnson",
    age=28,
    employee_number="EMP12345",
    email_id="alice.johnson@example.com",
    shift_hours=19  # This will trigger a warning and not set the hours to 11
)

# Check if the staff member can board the flight
if my_staff.can_board_flight():
    print(f"{my_staff.get_first_name()} {my_staff.get_last_name()} is allowed to board the flight.")
else:
    print(f"{my_staff.get_first_name()} {my_staff.get_last_name()} is not allowed to board the flight due to long shift hours.")


print(f"Staff Member: {my_staff.get_first_name()} {my_staff.get_last_name()}")
print(f"Age: {my_staff.get_age()}, Employee Number: {my_staff.get_employee_number()}")
print(f"Email: {my_staff.get_email_id()}, Shift Hours: {my_staff.get_shift_hours()}")

# Example of using setter methods to update the staff member's email
my_staff.set_email_id("alice.j.new@example.com")
print(f"Updated Email: {my_staff.get_email_id()}")